
STM32_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  0800038c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  0800038c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000394  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000398  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000398  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d24  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000473  00000000  00000000  00020d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000211c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  00021378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001532e  00000000  00000000  000214e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d57  00000000  00000000  0003680e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b6b0  00000000  00000000  00038565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  000b3c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000374 	.word	0x08000374

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000374 	.word	0x08000374

0800014c <main>:
#include <Vas_uart.h>
#include "main.h"


int main()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	//--- Настройка дебагового пина, для отладки и индикации ошибок
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;								// Тактируем порт C
 8000152:	4b3f      	ldr	r3, [pc, #252]	; (8000250 <main+0x104>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a3e      	ldr	r2, [pc, #248]	; (8000250 <main+0x104>)
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6193      	str	r3, [r2, #24]

	GPIOC -> CRH &= !0x00F00000;									// Обнуление регистра ножки
 800015e:	4b3d      	ldr	r3, [pc, #244]	; (8000254 <main+0x108>)
 8000160:	685b      	ldr	r3, [r3, #4]
 8000162:	4b3c      	ldr	r3, [pc, #240]	; (8000254 <main+0x108>)
 8000164:	2200      	movs	r2, #0
 8000166:	605a      	str	r2, [r3, #4]
	GPIOC -> CRH |= GPIO_CRH_MODE13_0;								// _ _ 0 1	 	10 мГц
 8000168:	4b3a      	ldr	r3, [pc, #232]	; (8000254 <main+0x108>)
 800016a:	685b      	ldr	r3, [r3, #4]
 800016c:	4a39      	ldr	r2, [pc, #228]	; (8000254 <main+0x108>)
 800016e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000172:	6053      	str	r3, [r2, #4]
	GPIOC -> CRH |= GPIO_CRH_CNF12_0;								// 0 1 _ _		Открытый сток
 8000174:	4b37      	ldr	r3, [pc, #220]	; (8000254 <main+0x108>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a36      	ldr	r2, [pc, #216]	; (8000254 <main+0x108>)
 800017a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800017e:	6053      	str	r3, [r2, #4]
	GPIOC -> ODR |= GPIO_ODR_ODR13_Msk;								// Устанавливаем 1 (гасим светодиод)
 8000180:	4b34      	ldr	r3, [pc, #208]	; (8000254 <main+0x108>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	4a33      	ldr	r2, [pc, #204]	; (8000254 <main+0x108>)
 8000186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800018a:	60d3      	str	r3, [r2, #12]
	}
*/


	//--- 1. Тактируем нужный порт A (PA2 TX, PA3 RX, USART2), шина APB1
	RCC->APB1ENR |= RCC_APB2ENR_IOPAEN;			// Тактируем порт A
 800018c:	4b30      	ldr	r3, [pc, #192]	; (8000250 <main+0x104>)
 800018e:	69db      	ldr	r3, [r3, #28]
 8000190:	4a2f      	ldr	r2, [pc, #188]	; (8000250 <main+0x104>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000198:	4b2d      	ldr	r3, [pc, #180]	; (8000250 <main+0x104>)
 800019a:	69db      	ldr	r3, [r3, #28]
 800019c:	4a2c      	ldr	r2, [pc, #176]	; (8000250 <main+0x104>)
 800019e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a2:	61d3      	str	r3, [r2, #28]

	//--- 1.1 Настраиваем ножки
	// PA2, TX: Alternate function push-pull
	GPIOA->CRL &= !GPIO_CRL_MODE2;				// MODE 00 == (reset val)
 80001a4:	4b2c      	ldr	r3, [pc, #176]	; (8000258 <main+0x10c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4b2b      	ldr	r3, [pc, #172]	; (8000258 <main+0x10c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_MODE2_0;				// MODE 01 == (10 MHz)
 80001ae:	4b2a      	ldr	r3, [pc, #168]	; (8000258 <main+0x10c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a29      	ldr	r2, [pc, #164]	; (8000258 <main+0x10c>)
 80001b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001b8:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= !GPIO_CRL_CNF2;				// CNF 00 == (reset val)
 80001ba:	4b27      	ldr	r3, [pc, #156]	; (8000258 <main+0x10c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4b26      	ldr	r3, [pc, #152]	; (8000258 <main+0x10c>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF2_1;				// CNF 10 == Alternate function output Push-pull
 80001c4:	4b24      	ldr	r3, [pc, #144]	; (8000258 <main+0x10c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a23      	ldr	r2, [pc, #140]	; (8000258 <main+0x10c>)
 80001ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001ce:	6013      	str	r3, [r2, #0]

	// PA3, RX: Input floating / Input pull-up
	GPIOA->CRL &= !GPIO_CRL_MODE3;				// MODE 00 == Input mode
 80001d0:	4b21      	ldr	r3, [pc, #132]	; (8000258 <main+0x10c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4b20      	ldr	r3, [pc, #128]	; (8000258 <main+0x10c>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]

	GPIOA->CRL &= !GPIO_CRL_CNF3;				// CNF 00 == (reset cur val)
 80001da:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <main+0x10c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <main+0x10c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_1;				// CNF 10 == Input with pull-up / pull-down
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <main+0x10c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <main+0x10c>)
 80001ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001ee:	6013      	str	r3, [r2, #0]



	//--- 2. Включение UART (9600, без чётности, 8 бит, 1 стоп бит (ВСЁ, кроме скорости выставляется по умолчанию, в проекте необходимо предусмотреть установку этих битов!)
	USART2->CR1 |= USART_CR1_UE;			// Включение UART производится без сброса, так как это не обязательно
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <main+0x110>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	4a19      	ldr	r2, [pc, #100]	; (800025c <main+0x110>)
 80001f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fa:	60d3      	str	r3, [r2, #12]

	//--- 2.1 Настройка скорости последовательного порта
	unsigned long mantissa = 52 << 4U; USART_BRR_DIV_Mantissa;
 80001fc:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000200:	607b      	str	r3, [r7, #4]
	unsigned long fraction = 83;
 8000202:	2353      	movs	r3, #83	; 0x53
 8000204:	603b      	str	r3, [r7, #0]
	USART2->BRR &= 0x0;						// Reset regisster
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x110>)
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <main+0x110>)
 800020c:	2200      	movs	r2, #0
 800020e:	609a      	str	r2, [r3, #8]
	USART2->BRR |= mantissa | fraction; 	// 9600 бод
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <main+0x110>)
 8000212:	689a      	ldr	r2, [r3, #8]
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	430b      	orrs	r3, r1
 800021a:	4910      	ldr	r1, [pc, #64]	; (800025c <main+0x110>)
 800021c:	4313      	orrs	r3, r2
 800021e:	608b      	str	r3, [r1, #8]

	//--- 2.2 Разрешаем работу приёмника и передатчика
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x110>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <main+0x110>)
 8000226:	f043 030c 	orr.w	r3, r3, #12
 800022a:	60d3      	str	r3, [r2, #12]
	//--- 3. Реализация функции передачи


	while(1)
	{
		while(0 == (USART_SR_TXE & USART2->SR))
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x110>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf0c      	ite	eq
 8000238:	2301      	moveq	r3, #1
 800023a:	2300      	movne	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	d000      	beq.n	8000244 <main+0xf8>
 8000242:	e7f3      	b.n	800022c <main+0xe0>
		{
			// Примитивная реализация ожидания освобождения регистра передачи, заменить на ОС или  проверку условия
		}
		USART2->DR = 0x210;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x110>)
 8000246:	f44f 7204 	mov.w	r2, #528	; 0x210
 800024a:	605a      	str	r2, [r3, #4]
		while(0 == (USART_SR_TXE & USART2->SR))
 800024c:	e7ee      	b.n	800022c <main+0xe0>
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	40011000 	.word	0x40011000
 8000258:	40010800 	.word	0x40010800
 800025c:	40004400 	.word	0x40004400

08000260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000264:	e7fe      	b.n	8000264 <NMI_Handler+0x4>

08000266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000266:	b480      	push	{r7}
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800026a:	e7fe      	b.n	800026a <HardFault_Handler+0x4>

0800026c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000270:	e7fe      	b.n	8000270 <MemManage_Handler+0x4>

08000272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000272:	b480      	push	{r7}
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000276:	e7fe      	b.n	8000276 <BusFault_Handler+0x4>

08000278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800027c:	e7fe      	b.n	800027c <UsageFault_Handler+0x4>

0800027e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr

0800028a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr

080002a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002a6:	f000 f82f 	bl	8000308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}

080002ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
	...

080002bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002bc:	f7ff fff7 	bl	80002ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002c2:	490c      	ldr	r1, [pc, #48]	; (80002f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002d8:	4c09      	ldr	r4, [pc, #36]	; (8000300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002e6:	f000 f821 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff2f 	bl	800014c <main>
  bx lr
 80002ee:	4770      	bx	lr
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002f8:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 80002fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000300:	20000024 	.word	0x20000024

08000304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <HAL_IncTick+0x1c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_IncTick+0x20>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4413      	add	r3, r2
 8000318:	4a03      	ldr	r2, [pc, #12]	; (8000328 <HAL_IncTick+0x20>)
 800031a:	6013      	str	r3, [r2, #0]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	20000000 	.word	0x20000000
 8000328:	20000020 	.word	0x20000020

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	2600      	movs	r6, #0
 8000330:	4d0c      	ldr	r5, [pc, #48]	; (8000364 <__libc_init_array+0x38>)
 8000332:	4c0d      	ldr	r4, [pc, #52]	; (8000368 <__libc_init_array+0x3c>)
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	f000 f81a 	bl	8000374 <_init>
 8000340:	2600      	movs	r6, #0
 8000342:	4d0a      	ldr	r5, [pc, #40]	; (800036c <__libc_init_array+0x40>)
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <__libc_init_array+0x44>)
 8000346:	1b64      	subs	r4, r4, r5
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
